# {{{ GPL License
# Logix - an extensible programming language for Python
# Copyright (C) 2004 Tom Locke
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# (http://www.gnu.org/copyleft/gpl.html)
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# }}}
# {{{ imports
import re
import time

try:
    from livedesk.util import debug
except ImportError:
# }}}

base = logix.baselang

deflang std(base):
deflang argPreconditions(std):

deflang lexprlang:

flist = logix.flist

# {{{ deflang std(base):
deflang std(base):

    # {{{ defop 100 "__continue__"
    star = '*'
    dstar = '**'
    defop 100 "__continue__" ( ( symbol:("=" term) | term )*
                               [ "**:" $(dstar):term
                               | "*:"  $(star):term ["**:" $(dstar):term]/-
                               ]/-
                             )

        macro *args **kws:
            logix.CallFunction(*args, **kws)
    # }}}

    defop r 5 expr "=" expr macro l r: (:base ` \l = \r)

    defop 0 "(" expr ")" macro x: x

    defop 65 expr "div" expr macro l r: (:base `\l / \r)

    # {{{ defop 85 expr "()"
    defop smartspace 85 expr "()"
        macro x: ` \x ()
    # }}}

    # {{{ defop 50 expr "isa" ["!"] expr
    defop 50 expr "isa" $strict:["!"] expr
        macro obx typx strict=False:
            if strict: `type(\obx) == \typx
            else: `isinstance(\obx, \typx)
    # }}}

    # {{{ defop 0 "gensyms" symbol* macro *names:
    defop 0 "gensyms" symbol* macro *names:
        for name in names: assert isinstance(name, logix.Symbol)
        `do: \*[( `\name = logix.gensym( \(str(name)) ) ) for name in names]
    # }}}

    # {{{ subscript
    defop smartspace 90 expr "/[" [expr] [":" [expr] [":" expr] ]/- "]"
        macro objx fromx *rest:
            if len(rest) == 0:
                `\objx[\fromx]
            else:
                tox, stepx = rest
                `\objx[\fromx:\tox:\stepx]

    defop smartspace 90 expr "/*[" [expr] [":" [expr] [":" expr] ]/- "]"
        macro objx fromx *rest:
            x = logix.gensym('x')
            if len(rest) == 0:
                `[\x[\fromx] for \x in \objx]
            else:
                tox, stepx = rest
                `[\x[\fromx:\tox:\stepx] for x in \objx]

    defop smartspace 90 expr "/" term
        macro obj key:
            if isinstance(key, logix.Symbol):
                `\obj[\(str(key))]
            elif isinstance(key, int):
                `\obj[\key]
            else:
                assert 0, "invalid key"

    defop smartspace 90 expr "/*" term
        macro obj key:
            x = logix.gensym('x')
            if isinstance(key, logix.Symbol):
                `[\x[\(str(key))] for \x in \obj]
            elif isinstance(key, int):
                `[\x[\key] for \x in \obj]
            else:
                assert 0, "invalid key"
    # }}}

    # {{{ defop 110 "$" expr
    defop 110 "$" expr
        macro f: `it . \f
    # }}}

    # {{{ Field access: . .? .* 
    # {{{ defop smartspace 90 expr "." term
    defop smartspace 90 expr "." term
        macro obx fieldx:
            if isinstance(fieldx, logix.Symbol):
                `\obx . \fieldx
            elif isinstance(fieldx, ``( ) and isinstance(fieldx[0], ``, ):
                `getattr(\obx, *\fieldx)
            else:
                `getattr(\obx, \fieldx)
    # }}}

    # {{{ defop smartspace 90 expr ".*" term
    defop smartspace 90 expr ".*" term
        macro obx fieldx:
            x = logix.gensym('x')
            `[\x .\fieldx for \x in \obx]
    # }}}

    # {{{ defop smartspace 90 expr ".?" term
    defop smartspace 90 expr ".?" term
        macro objx fieldx:
            ob = logix.gensym('ob')
            `do:
              \ob = \objx
              \ob and \ob . \fieldx
    # }}}
    # }}}

    # {{{ "[" ... "]"
    defop 0 "[" ( "]" <list>
    
                | ":" "]" <dict>
                
                | symbol:("=" expr) ("," symbol:("=" expr))* ["," <>]/- "]" <list>
                
                | expr ( "]" <list>
                
                       | ("," (symbol:("=" expr) | expr))+ ["," <>]/- "]" <list>

                       | "=" expr $quals:("for" expr "in" expr
                                          $ifs:("if" expr)* )+ "]" <flistcomp>
                       
                       | ":" expr ( ("," expr ":" expr)* "]" <dict>
                       
                                  | $quals:("for" expr "in" expr
                                            $ifs:("if" expr)* )+ "]" <dictcomp>
                                  )
                                            
                       | $quals:("for" expr "in" expr
                                 $ifs:("if" expr)* )+ "]" <listcomp>
                                 
                       | ".." expr "]" <range>
                       ))

        # {{{ Implementation
        macro *args **kws:
            kind = args[-1]
            els = args[:-1]
            
            if kind == 'list':
                if len(kws) > 0:
                    flist.new(els, kws) 
                else:
                    list(els)
                    
            elif kind == 'dict':
                return dict(zip(els[::2], els[1::2]))
                
            elif kind == 'dictcomp':
                elemx = `\(els[0]) , \(els[1])
                comp = ``[ (elemx, 'comp', quals=kws['quals'])
                `dict(\comp)
                
            elif kind == 'listcomp':
                ``[ (els[0], 'comp', quals=kws['quals'])
                
            elif kind == 'range':
                frm = els[0]
                to = els[1] + 1
                `xrange(\frm, \to)
                
            elif kind == 'flistcomp':
                fieldx = els[0]
                valx = els[1]
                comp = ``[ (`(\fieldx, \valx), 'comp', quals=kws['quals'])
                `logix.flist.new([], dict(\comp))
            
            else:
                assert 0
        # }}}
    # }}}

    setlang std

    # {{{ defop 200 '~' expr
    defop 200 '~' expr
        macro x:
            `logix.Symbol \(if x isa logix.Symbol: str x else: x)
    # }}}

    # {{{ functions
    # {{{ argrule
    argrule = (:logix.syntaxlang[ ($:(symbol ["=" term]/-
                                      $pre:["(" expr@argPreconditions ")"]))*
                                  [ "*" $star:symbol ["**" $dstar:symbol]/-
                                  | "**" $dstar:symbol
                                  ]/-
                                ])
    # }}}

    def argsToBaseArgs(args):
         baseargs = flist()
         for arg in args.elems:
             default = arg.get("default")
             if arg.hasField 'default':
                 baseargs/[name]= arg/default
             else:
                 baseargs.append ~(name)
         return baseargs

    # {{{ def preconditionTests(funcname, args):
    def preconditionTests(funcname, args):
        tests = []
        for arg in args.elems:
            if arg.hasField 'pre':
                name = arg/0
                prex = arg/pre
                gensyms pre
                test = `do:
                    \pre = \prex
                    if (if isinstance \pre type: not isinstance \name \pre
                        else: not \pre \name):
                        raise logix.ArgPreconditionError \funcname
                                                         \(str name)
                                                         \name
                tests.append test
        tests
    # }}}

    # {{{ defop 0 "{" ( $args:argrule "|" expr
    defop 0 "{" ( $args:argrule "|" expr
                | expr
                ) "}"

        macro expr args=None:
            if args is None:
                assert not isinstance expr ``|,
                       "invalid lambda (syntax error in arguments)"

                `lambda it: \expr
            else:
                lambdaStr = do:
                    s = str expr
                    maxlen = 15
                    "<lambda: %s>" % (if len s > maxlen: s/[:maxlen] + "..." else: s)

                body = `do:
                    \*(std.preconditionTests lambdaStr args)
                    \expr

                ``lambda body args=args
    # }}}

    # {{{ defop 0 "def" term $args:argrule ":" $body:block
    defop 0 "def" $static:['static'] symbol $args:argrule ":" $body:block
        macro name body args static=None:
            assert name isa logix.Symbol

            tests = std.preconditionTests (str name) args
            body2 = tests + list body
            thedef = (:base ``def) name args=args body=body2
            if static:
                `do:
                    \thedef
                    \name = staticmethod \name
            else:
                thedef
    # }}}
    # }}}

    # {{{ partial operators
    # Some experimental stuff - infix operators that support partial application

    defop 10 "makepartialop" term $binding:term $fn:[expr]
        macro op binding fn=None:
            theop = logix.eval op
            f = fn or `{lx rx | \(op ~lx ~rx) }
            t = theop.__syntax__.token
            `defop \binding [expr] lit \t [expr]
                macro lx rx:
                    if not lx and not rx:
                        `\\f
                    elif not lx:
                        `{ \(\\op ~it rx)}
                    elif not rx:
                        `{ \(\\op lx ~it)}
                    else:
                        \op lx rx

    import operator
    makepartialop ``+ 60 operator.add
    makepartialop ``* 65 operator.mul
    # }}}

    # {{{ forany forall
    defop 20 expr "forany" expr "in" expr
        macro testx elemx listx:
            res = logix.gensym()
            `do:
                for \elemx in \listx:
                    if \testx:
                        \res = True
                        break
                else:
                    \res = False
                \res

    defop 20 expr "forall" expr "in" expr
        macro testx elemx listx:
            res = logix.gensym()
            `do:
                for \elemx in \listx:
                    if not \testx:
                        \res = False
                        break
                else:
                    \res = True
                \res
    # }}}

    # {{{ listfor listwhile valfor breakwith
    # {{{ defop 0 "listfor" $placex:expr "in" $listx:expr $filtx:["if" expr]
    defop 0 "listfor" $placex:expr "in" $listx:expr $filtx:["if" expr]
                      ":" $body:block
        macro placex listx body filtx=None:
            gensyms res

            loopbody = if filtx: `if \filtx: \res .append do: \*body
                       else:     `\res .append do: \*body

            `do:
                \res = []
                for \placex in \listx:
                    \loopbody
                \res
    # }}}

    # {{{ defop 0 "listwhile" $testx:expr ":" $body:block
    defop 0 "listwhile" $testx:expr ":" $body:block
        macro testx body:
            gensyms res
            `do:
                \res = []
                while \testx:
                    \res .append do: \*body
                \res
    # }}}

    defop 0 "valfor" $placex:expr "in" $listx:expr
                     ":" $body:block
                     [eol]/- "else:" $else_:block
                     
        macro placex listx body else_ __context__:
            gensyms res
            __context__/breakwithVar = res
            `do:
                for \placex in \listx:
                    \body
                else:
                    \res = do: \*else_
                \res

    defop 0 "breakwith" expr macro x __context__:
        resultVar = __context__/breakwithVar
        `do:
            \resultVar = \x
            break
    # }}}
    
    # {{{ pipes .> *> ?> 
    # {{{ defop 50 expr "*>" expr
    defop 50 expr "*>" expr
        macro listx funcx:
            gensyms var
            `do:
                \var = \listx
                map \funcx \var
    # }}}

    # {{{ defop 50 expr ".>" expr
    defop 50 expr ".>" expr
        macro argx funcx:
            gensyms var
            `do:
                \var = \argx
                \funcx \var
    # }}}

    # {{{ defop 50 expr "?>" expr
    defop 50 expr "?>" expr
        macro listx funcx:
            gensyms var
            `do:
                \var = \listx
                filter \funcx \var
    # }}}
    # }}}

    # {{{ defop 35 expr "=~" "/" freetext "/" $ignorecase:["i"]
    defop 35 expr "=~" "/" freetext /[^\/\\]*(?:\\.[^\/\\]*)*/ "/" $ignorecase:["i"]
        func s pattern ignorecase=False:
            flags = if ignorecase: re.IGNORECASE else: 0
            re.search pattern s flags
    # }}}

    # {{{ defop 0 "do" $timed:["timed"] ":" block
    defop 0 "do" $timed:["timed" [expr]] ":" block
        macro body **kw:
            if kw.has_key 'timed':
                msg = if kw/timed:
                          `\(kw/timed) + " "
                      else:
                          `""
                gensyms now time res
                setlang base
                `do:
                    \now = \@.time.time()
                    \res = do: \*body
                    print "%sblock time: %f" % (\msg, \@.time.time() - \now)
                    \res
            else:
                (:base `do: \*body)
    # }}}

    defop 6 expr ",*" expr (",*" expr)* func *args: zip *:args

    defop 1 expr "not:" token expr macro lx op rx: `not \(op lx rx)

    # {{{ """| 
    defop 0 '"""|' freetext /.*/ ("|" freetext /.*/)* ['"'<>]/-
        func *strs: "\n".join strs
    # }}}
# }}}

# {{{ deflang argPreconditions(std):
deflang argPreconditions(std):

    defop 50 expr "?" func precon:
        setlang base
        def test(x):
            if x is None:
                return True
            else:
                if isinstance(precon, type):
                    return isinstance(x, precon)
                else:
                    return precon(x)
        return test
# }}}

setlang std

# {{{ \@ support 
def localModuleMacro modname:
    `logix.lmodules/[\modname]

logix.rootops.localmodule.macro = staticmethod localModuleMacro
# }}}